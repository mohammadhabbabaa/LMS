@model Kurs.Models.LiveCours

<style>
    .sdk-select {
        height: 34px;
        border-radius: 4px;
    }

    .websdktest button {
        float: right;
        margin-left: 5px;
    }

    #nav-tool {
        margin-bottom: 0px;
    }

    #show-test-tool {
        position: absolute;
        top: 100px;
        left: 0;
        display: block;
        z-index: 99999;
    }
    .navbar-vertical.navbar-expand-xs.fixed-right, .suspension-content2 {
        display: none;
    }

</style>


            <body onload="myFunction()">

                <nav id="nav-tool" class="navbar navbar-inverse navbar-fixed-top" style="display:none">
                    <div class="container">
                        <div class="navbar-header">
                            <a class="navbar-brand" href="#"> </a>
                        </div>
                        <div id="navbar" class="websdktest">
                            <form class="navbar-form navbar-right" id="meeting_form">
                                <div class="form-group">
                                    <input type="text" name="display_name" id="display_name" value="1.7.8#CDN" maxLength="100"
                                           placeholder="Name" class="form-control" required>
                                </div>

                                <div class="form-group">
                                    <input type="text" name="display_name" id="display_name" value="1.7.8#CDN" maxLength="100"
                                           placeholder="Name" class="form-control" required>
                                </div>
                                <div class="form-group">
                                    <input type="text" name="display_name" id="display_name" value="1.7.8#CDN" maxLength="100"
                                           placeholder="Name" class="form-control" required>
                                </div>
                                <div class="form-group">
                                    <input type="text" name="meeting_number" id="meeting_number" value="" maxLength="11"
                                           style="width:150px" placeholder="Meeting Number" class="form-control" required>
                                </div>
                                <div class="form-group">
                                    <input type="text" name="meeting_pwd" id="meeting_pwd" value="" style="width:150px"
                                           maxLength="32" placeholder="Meeting Password" class="form-control">
                                </div>

                                <div class="form-group">
                                    <select id="meeting_role" class="sdk-select">
                                        <option value=0>Attendee</option>

                                    </select>
                                </div>
                                <div class="form-group">
                                    <select id="meeting_lang" class="sdk-select" style="visibility: hidden;">
                                        <option value="en-US">English</option>
                                    </select>
                                </div>

                                <button type="submit" class="btn btn-primary" id="join_meeting">Join</button>
                                <button type="submit" class="btn btn-primary" id="clear_all">Clear</button>

                            </form>
                        </div>
                        <!--/.navbar-collapse -->
                    </div>
                </nav>
                <input type="text" id="mymeeting_number" value="@Model.ZoomUser" />
                <input type="text" id="mymeeting_pwd" value="@Model.ZoomPass" />
                <input type="text" id="mydisplay_name" value="@Session["StdName"].ToString()" />
                <input type="text" id="myAPI_KEY" value="@Session["API_KEY"].ToString()" />
                <input type="text" id="myAPI_SECRET" value="@Session["API_SECRET"]" />
                <input type="text" id="url" value="@HttpContext.Current.Request.Url.Host" />


                <script>
                    document.getElementById('show-test-tool-btn').addEventListener("click", function (e) {
                        var textContent = e.target.textContent;
                        if (textContent === 'Show') {
                            document.getElementById('nav-tool').style.display = 'block';
                            document.getElementById('show-test-tool-btn').textContent = 'Hide';
                        }
                        else {
                            document.getElementById('nav-tool').style.display = 'none';
                            document.getElementById('show-test-tool-btn').textContent = 'Show';
                        }
                    })

                    function myFunction() {

                        sessionStorage.setItem("meeting_number", document.getElementById('mymeeting_number').value);
                        sessionStorage.setItem("meeting_pwd", document.getElementById('mymeeting_pwd').value);
                        sessionStorage.setItem("display_name", document.getElementById('mydisplay_name').value);


                        // Retrieve

                        document.getElementById("meeting_pwd").value = sessionStorage.getItem("meeting_pwd");
                        document.getElementById("meeting_number").value = sessionStorage.getItem("meeting_number");
                        document.getElementById("display_name").value = sessionStorage.getItem("display_name");

                        document.getElementById("join_meeting").click();


                    }






                </script>

                <script src="https://source.zoom.us/1.7.8/lib/vendor/react.min.js"></script>
                <script src="https://source.zoom.us/1.7.8/lib/vendor/react-dom.min.js"></script>
                <script src="https://source.zoom.us/1.7.8/lib/vendor/redux.min.js"></script>
                <script src="https://source.zoom.us/1.7.8/lib/vendor/redux-thunk.min.js"></script>
                <script src="https://source.zoom.us/1.7.8/lib/vendor/jquery.min.js"></script>
                <script src="https://source.zoom.us/1.7.8/lib/vendor/lodash.min.js"></script>

                <script src="https://source.zoom.us/zoom-meeting-1.7.8.min.js"></script>
                <script src="~/Content/assets/zoom/js/tool.js"></script>

                <script>
                    (function () {

                        console.log('checkSystemRequirements');
                        console.log(JSON.stringify(ZoomMtg.checkSystemRequirements()));
                        ZoomMtg.preLoadWasm();
                        ZoomMtg.prepareJssdk();

                        var API_KEY = document.getElementById('myAPI_KEY').value;

                        /**
                         * NEVER PUT YOUR ACTUAL API SECRET IN CLIENT SIDE CODE, THIS IS JUST FOR QUICK PROTOTYPING
                         * The below generateSignature should be done server side as not to expose your api secret in public
                         * You can find an eaxmple in here: https://marketplace.zoom.us/docs/sdk/native-sdks/web/essential/signature
                         */
                        var API_SECRET = document.getElementById('myAPI_SECRET').value;

                        testTool = window.testTool;
                        document.getElementById('display_name').value = "CDN" + ZoomMtg.getJSSDKVersion()[0] + testTool.detectOS() + "#" + testTool.getBrowserInfo();
                        document.getElementById('meeting_number').value = testTool.getCookie("meeting_number");
                        document.getElementById('meeting_pwd').value = testTool.getCookie("meeting_pwd");
                        if (testTool.getCookie("meeting_lang")) document.getElementById('meeting_lang').value = testTool.getCookie("meeting_lang");

                        document.getElementById('meeting_lang').addEventListener('change', function (e) {
                            testTool.setCookie("meeting_lang", document.getElementById('meeting_lang').value);
                            $.i18n.reload(document.getElementById('meeting_lang').value);
                            ZoomMtg.reRender({ lang: document.getElementById('meeting_lang').value });
                        });

                        document.getElementById('clear_all').addEventListener('click', function (e) {
                            testTool.deleteAllCookies();
                            document.getElementById('display_name').value = '';
                            document.getElementById('meeting_number').value = '';
                            document.getElementById('meeting_pwd').value = '';
                            document.getElementById('meeting_lang').value = 'en-US';
                            document.getElementById('meeting_role').value = 0;
                        });

                        document.getElementById('join_meeting').addEventListener('click', function (e) {

                            e.preventDefault();

                            if (!this.form.checkValidity()) {
                                alert("Enter Name and Meeting Number");
                                return false;
                            }

                            var meetConfig = {
                                apiKey: API_KEY,
                                apiSecret: API_SECRET,
                                meetingNumber: parseInt(document.getElementById('meeting_number').value),
                                userName: document.getElementById('display_name').value,
                                passWord: document.getElementById('meeting_pwd').value,
                                leaveUrl: document.getElementById('url').value,
                                role: parseInt(document.getElementById('meeting_role').value, 10)
                            };
                            testTool.setCookie("meeting_number", meetConfig.meetingNumber);
                            testTool.setCookie("meeting_pwd", meetConfig.passWord);


                            var signature = ZoomMtg.generateSignature({
                                meetingNumber: meetConfig.meetingNumber,
                                apiKey: meetConfig.apiKey,
                                apiSecret: meetConfig.apiSecret,
                                role: meetConfig.role,
                                success: function (res) {
                                    console.log(res.result);
                                }
                            });

                            ZoomMtg.init({
                                leaveUrl: 'login',
                                success: function () {
                                    ZoomMtg.join(
                                        {
                                            meetingNumber: meetConfig.meetingNumber,
                                            userName: meetConfig.userName,
                                            signature: signature,
                                            apiKey: meetConfig.apiKey,
                                            passWord: meetConfig.passWord,
                                            success: function (res) {
                                                $('#nav-tool').hide();
                                                console.log('join meeting success');
                                            },
                                            error: function (res) {
                                                console.log(res);
                                            }
                                        }
                                    );
                                },
                                error: function (res) {
                                    console.log(res);
                                }
                            });

                        });

                    })();

                </script>
            </body>
     
